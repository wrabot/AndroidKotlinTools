/**
 * Copyright (c) 2017-present, Wilfrid Rabot.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
 * the License for the specific language governing permissions and limitations under the License.
 */

package com.wrabot.tools

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.annotation.UiThread
import androidx.databinding.ViewDataBinding
import androidx.lifecycle.MutableLiveData
import androidx.recyclerview.widget.RecyclerView


/**
 * A RecyclerView adapter which uses data binding for items.
 * @param inflate the item binding inflater (ie ItemBinding::inflate)
 * @param set the item binding setter generated by the data binding from variable tag (ie ItemBinding::setItem)
 * @param id the item method which provides the id used as stable id (see setHasStableIds) (ie Item::id)
 */
@Suppress("unused", "MemberVisibilityCanBePrivate")
open class SimpleRecyclerAdapter<T : Any, U : ViewDataBinding>(
        private val inflate: (LayoutInflater, ViewGroup, Boolean) -> U,
        private val set: U.(T) -> Unit,
        private val id: (T.() -> Long)? = null
) : RecyclerView.Adapter<SimpleRecyclerAdapter.BindingHolder<U>>() {

    class BindingHolder<out T : ViewDataBinding>(val binding: T) : RecyclerView.ViewHolder(binding.root)

    /**
     * current items.
     */
    var items = emptyList<T>()
        @UiThread
        set(value) {
            field = value
            notifyDataSetChanged()
        }

    /**
     * clicked items.
     */
    val clicks = MutableLiveData<T>()

    /**
     * clicked items with position and view.
     */
    val clickEvents = MutableLiveData<Triple<T, Int, View>>()

    init {
        @Suppress("LeakingThis")
        setHasStableIds(id != null)
    }

    override fun getItemId(position: Int) = id?.invoke(items[position]) ?: 0

    override fun getItemCount() = items.size

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int) =
            BindingHolder(inflate(LayoutInflater.from(parent.context), parent, false)).apply {
                itemView.setOnClickListener {
                    val item = items.getOrNull(adapterPosition) ?: return@setOnClickListener
                    clicks.postValue(item)
                    clickEvents.postValue(Triple(item, adapterPosition, itemView))
                }
            }

    override fun onBindViewHolder(holder: BindingHolder<U>, position: Int) {
        holder.binding.set(items[position])
        holder.binding.executePendingBindings()
    }
}
